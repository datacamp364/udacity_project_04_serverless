service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

# AWS specific configuration #
provider:
  name: aws
  runtime: nodejs12.x
  rolePermissionsBoundary: 'arn:aws:iam::274854422114:policy/acs/acs-boundary-policy'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODO_TABLE: TODOS-${self:provider.stage}    
    TODO_CREATED_INDEX: TODOCreatedIndex    
    ATTACHEMENT_S3_BUCKET: serverless-udagram-attachement-datacamp364-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

# documentation and other stuff #
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo API
        description: Serverless application for todos
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-schema.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-schema.json)}


# definition of serverless functions #    
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Getting all TODO items #
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: 
        - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:274854422114:table/${self:provider.environment.TODO_TABLE}

  # Creating a new TODO item #
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Creates a new todo item 
            description: Creates a new todo item 
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274854422114:table/${self:provider.environment.TODO_TABLE}

  # Updates an existing TODO item #
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Updates an existing todo item in database
            description: Updates an existing todo item in database
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274854422114:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:274854422114:table/${self:provider.environment.TODO_CREATED_INDEX}

  # Deletes existing TODO item in database #
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274854422114:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:274854422114:table/${self:provider.environment.TODO_CREATED_INDEX}

  GenerateUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHEMENT_S3_BUCKET}/*

resources:
  Resources:
    # resource that takes care of API Gateway instance(s) #
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    # request content / body validator #
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    # dynamodb table for 
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}
        # creating a new index so searching with the createdAt attribute is possible #
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_CREATED_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    # defining here the S3 bucket for attachements # 
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHEMENT_S3_BUCKET}
        Tags:
          - Key: "Allowed_Public_Access"
            Value: "True"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    # creating a new policy so that reading from my new S3 bucket will be allowed to everyone (*) #
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHEMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket